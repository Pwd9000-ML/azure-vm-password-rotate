name: 'Rotate AZURE Virtual Machine Passwords'
description: 'Rotate AZURE virtual machines local administrator Passwords, using AZURE key vault'
inputs:
  key-vault-name:
    description: 'Name of the Azure key vault pre-populated with secret name keys representing server names hosted in Azure'
    required: true
  password-length: 
    description:  'The amount of characters in the password. Defaults to 24'
    required: false
    default: '24'
# https://actions-cool.github.io/github-action-branding/
branding:
  icon: 'rotate-cw'
  color: 'green'
runs:
  using: "composite"
  steps:
    #- name: Generate Random Char Set using System.Web Assembly and set environment
    #  shell: powershell
    #  run: |
    #    [system.reflection.assembly]::LoadWithPartialName("System.Web")
    #    [String]$random = [System.Web.Security.Membership]::GeneratePassword(64, 32)
    #    echo ::add-mask::$random
    #    echo "RANDOM_CHAR_SET=$random" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Rotate VM administrator passwords
      uses: azure/powershell@v1
      env:
        KEY_VAULT_NAME: ${{ inputs.key-vault-name }}
        PASSWORD_LENGTH: ${{ inputs.password-length }}
      with:
        inlineScript: | 
          #Generate Randomized Character Set
          #---------------------------------
          $null = Add-Type -AssemblyName System.Web
          $charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{]+-[*=@:)}$^%;(_!&#?>/|.'.ToCharArray()
          $crypt = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
          $bytes = New-Object 'System.Array[]'(128)
          For ($i = 0; $i -lt $bytes.Count ; $i++)
          {
              $bytes[$i] = New-Object byte[](2)
          }

          $charSetRandom = New-Object char[](128)
          For ($i = 0 ; $i -lt 128 ; $i++) {
              Do {
                  $crypt.GetBytes($bytes[$i])
                  $num = [System.BitConverter]::ToUInt16($bytes[$i],0)
              } While ($num -gt ([uint16]::MaxValue - ([uint16]::MaxValue % $CharSet.Length) -1))
              $charSetRandom[$i] = $charSet[$num % $charSet.Length]
          }
          $charSetRandom = $charSetRandom -join ''
          #---------------------------------

          #Vm Password rotate Key Vault from Randomized Character Set
          #----------------------------------------------------------
          [int]$length = ${{ env.PASSWORD_LENGTH }}
          $keyVaultName = "${{ env.KEY_VAULT_NAME }}"
          Write-Output "Creating array of all VM names in key vault: [$keyVaultName]."
          $keys = (Get-AzKeyVaultSecret -VaultName $keyVaultName).Name
          Write-Output "Looping through each VM key and changing the local admin password"
          Foreach ($key in $keys) {
            $vmName = $key
            If (Get-AzVm -Name $vmName -ErrorAction SilentlyContinue) {
              $resourceGroup = (Get-AzVm -Name $vmName).ResourceGroupName
              $location = (Get-AzVm -Name $vmName).Location
              Write-Output "Server found: [$vmName]... Checking if VM is in a running state"
              $vmObj = Get-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Status
              [String]$vmStatusDetail = "deallocated"
              Foreach ($vmStatus in $vmObj.Statuses) {
                If ($vmStatus.Code -eq "PowerState/running") {
                  [String]$vmStatusDetail = $vmStatus.Code.Split("/")[1]
                }
              }
              If ($vmStatusDetail -ne "running") {
                Write-Warning "VM is NOT in a [running] state... Skipping"
                Write-Output "--------------------------"
              }
              Else {
                Write-output "VM is in a [running] state... Generating new secure Password for: [$vmName]"
                $passwordGen = (($charSetRandom)[0..64] | Get-Random -Count $length) -join ''
                $secretPassword = ConvertTo-SecureString -String $passwordGen -AsPlainText -Force
                Write-Output "Updating key vault: [$keyVaultName] with new random secure password for virtual machine: [$vmName]"
                $Date = (Get-Date).tostring("dd-MM-yyyy")
                $Tags = @{ "Automation" = "Github-Workflow";  "Password-Rotated" = "true"; "Password-Rotated-On" = "$Date"}
                $null = Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "$vmName" -SecretValue $secretPassword -Tags $Tags
                Write-Output "Updating VM with new password..."
                $adminUser = (Get-AzVm -Name $vmName | Select-Object -ExpandProperty OSProfile).AdminUsername
                $Cred = New-Object System.Management.Automation.PSCredential ($adminUser, $secretPassword)
                $null = Set-AzVMAccessExtension -ResourceGroupName $resourceGroup -Location $location -VMName $vmName -Credential $Cred -typeHandlerVersion "2.0" -Name VMAccessAgent
                Write-Output "Vm password changed successfully."
                Write-Output "--------------------------"
              }
            }
            Else {
             Write-Warning "VM NOT found: [$vmName]."
             Write-Output "--------------------------"
            }
          }
          #----------------------------------------------------------
        azPSVersion: 'latest'